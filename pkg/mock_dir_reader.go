// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/andyollylarkin/process-list/pkg (interfaces: DirReader)
//
// Generated by this command:
//
//	mockgen -destination=mock_dir_reader.go -package=pkg . DirReader
//

// Package pkg is a generated GoMock package.
package pkg

import (
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDirReader is a mock of DirReader interface.
type MockDirReader struct {
	ctrl     *gomock.Controller
	recorder *MockDirReaderMockRecorder
	isgomock struct{}
}

// MockDirReaderMockRecorder is the mock recorder for MockDirReader.
type MockDirReaderMockRecorder struct {
	mock *MockDirReader
}

// NewMockDirReader creates a new mock instance.
func NewMockDirReader(ctrl *gomock.Controller) *MockDirReader {
	mock := &MockDirReader{ctrl: ctrl}
	mock.recorder = &MockDirReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirReader) EXPECT() *MockDirReaderMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockDirReader) Open(name string) (fs.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(fs.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockDirReaderMockRecorder) Open(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDirReader)(nil).Open), name)
}

// ReadDir mocks base method.
func (m *MockDirReader) ReadDir(dirName string) ([]fs.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", dirName)
	ret0, _ := ret[0].([]fs.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockDirReaderMockRecorder) ReadDir(dirName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockDirReader)(nil).ReadDir), dirName)
}

// ReadFile mocks base method.
func (m *MockDirReader) ReadFile(filePath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockDirReaderMockRecorder) ReadFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockDirReader)(nil).ReadFile), filePath)
}

// ReadLink mocks base method.
func (m *MockDirReader) ReadLink(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLink", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLink indicates an expected call of ReadLink.
func (mr *MockDirReaderMockRecorder) ReadLink(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLink", reflect.TypeOf((*MockDirReader)(nil).ReadLink), name)
}
